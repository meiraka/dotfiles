function prompt_color {
    if [ "$1" = "reset" ]
    then
        echo '%{\e[m%}'
    else
        # generate color code
        local code=-1
        local style=38
        if [ "$1" = "bg" ]
        then
            (( style = 48 ))
        fi
        (( rv = $(printf '%d\n' 0x$(echo $2 | cut -b 2,3)) ))
        (( gv = $(printf '%d\n' 0x$(echo $2 | cut -b 4,5)) ))
        (( bv = $(printf '%d\n' 0x$(echo $2 | cut -b 6,7)) ))
        echo '%{\e['"${style}"';2;'"${rv}"';'"${gv}"';'"${bv}"'m%}'
    fi
}

function set_user_var() {
   printf "\033]1337;SetUserVar=%s=%s\007" $1 `echo -n $2 | base64`
}

prompt_arrow="❱ "
#prompt_red=$(prompt_color fg '#e27878')
#prompt_green=$(prompt_color fg '#89b8c2')
#prompt_yellow=$(prompt_color fg '#e2a478')
prompt_gray=$(prompt_color fg '#aaaaaa')
prompt_reset=$(prompt_color reset)
prompt_red=$(echo '%{\e[0;31m%}')
prompt_green=$(echo '%{\e[0;32m%}')
prompt_yellow=$(echo '%{\e[0;33m%}')

PROMPT2=". "
RPROMPT=''
SPROMPT='${prompt_red}%{$suggest%}%B%r%b [y, n, a, e] > ${prompt_reset}'

autoload -Uz add-zsh-hook
add-zsh-hook precmd prompt_vcs_info
function prompt_vcs_info() {
    if [ ! -d .git ]; then
        return
    fi
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = "true" ]; then
        local VCS_TEXT="git"
        local VCS_REPO_TEXT=$(git config --get remote.origin.url)
        local VCS_BRANCH_TEXT=$(git rev-parse --abbrev-ref HEAD)
        local VCS_DEFAULT_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD 2> /dev/null | cut -c8-)
    fi
    if [ "${VCS_TEXT}" = "" ]; then
        PROMPT_VCS_INFO=""
        set_user_var VCS ""
        set_user_var VCS_REPO ""
        set_user_var VCS_BRANCH ""
        set_user_var VCS_DEFAULT_BRANCH ""
    else
        set_user_var VCS "${VCS_TEXT}"
        set_user_var VCS_REPO "${VCS_REPO_TEXT}"
        set_user_var VCS_BRANCH "${VCS_BRANCH_TEXT}"
        set_user_var VCS_DEFAULT_BRANCH "${VCS_DEFAULT_BRANCH}"
        if [ "${VCS_BRANCH_TEXT}" = "${VCS_DEFAULT_BRANCH}" ]; then
            PROMPT_VCS_INFO="${prompt_gray}${VCS_REPO_TEXT} ${prompt_yellow}${VCS_BRANCH_TEXT}${prompt_reset}"
        else
            PROMPT_VCS_INFO="${prompt_gray}${VCS_REPO_TEXT} ${prompt_green}${VCS_BRANCH_TEXT}${prompt_reset}"
        fi
    fi
}

add-zsh-hook precmd prompt_kube_info
function prompt_kube_info() {
    local context ns
    if context=$(kubectl config current-context 2>/dev/null); then
        ns=$(kubectl config view -o "jsonpath={.contexts[?(@.name==\"$context\")].context.namespace}")
        [[ -z "$ns" ]] && ns="(default)"
        PROMPT_KUBE_INFO="${prompt_green}${context}:${ns}${prompt_reset}"
        set_user_var KUBE_CONTEXT "${context}"
        set_user_var KUBE_NAMESPACE "${ns}"
    else
        PROMPT_KUBE_INFO=""
        set_user_var KUBE_CONTEXT ""
        set_user_var KUBE_NAMESPACE ""
    fi
}

function zle-line-init zle-keymap-select {
    case $KEYMAP in
        vicmd)
            PROMPT="${prompt_yellow}${prompt_arrow}${prompt_reset}"
        ;;
        visual|main)
            PROMPT="${prompt_green}${prompt_arrow}${prompt_reset}"
        ;;
        *)
            PROMPT="${prompt_red}${prompt_arrow}${prompt_reset}"
        ;;
    esac
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
